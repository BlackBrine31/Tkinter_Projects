import tkinter as tk 
from PIL import Image,ImageTk
from tkinter.ttk import Combobox
from tkinter.filedialog import askopenfilename
import re
import random
import sqlite3
import os
root=tk.Tk()

root.geometry("700x700")
root.title(" 188 nomreli mektebin idareetme sistemi")

bg_color="#273b7a"

login_student_icon=tk.PhotoImage(file="login_student_img.png")
login_admin_icon=tk.PhotoImage(file="admin_img.png")
add_student_icon=tk.PhotoImage(file="add_student_img.png")
locked=tk.PhotoImage(file="locked.png")
unlocked=tk.PhotoImage(file="unlocked.png")
add_student_pic = tk.PhotoImage(file="add_image.png") 

def init_database():
    if os.path.exists("students_account.db"):
        pass
    else:
        connection=sqlite3.connect("students_account.db")
        
        cursor=connection.cursor()
        cursor.execute("""
        CREATE TABLE (
        id_number text,
        password text,
        name text,
        age text,
        gender text,
        phone_number text,
        class text,
        email_text,
        image blob)
        """)
        
        
        connection.commit()
        connection.close()
def add_data(id_number,password,name,age,gender,phone_number,student_class,email,pic_data):
    connection=sqlite3.connect("students_account.db")
    
    cursor=connection.cursor()
    cursor.execute(f"""
    INSERT INTO data VALUES("{id_number}","{password}","{name}","{age}","{gender}","{phone_number}","{student_class}","{email}","{pic_data}",)
    """)
    
def confirmation_box(message):
    answer=tk.BooleanVar()
    answer.set(False)
    def action(ans):
        answer.set(ans)
        confirmation_box_fm.destroy()
    confirmation_box_fm=tk.Frame(root,highlightbackground=bg_color,highlightthickness=3)
    
    message_lb=tk.Label(confirmation_box_fm,text=message,font=("Bold",15))
    message_lb.pack(pady=20)
    
    cancel_btn=tk.Button(confirmation_box_fm,text="Cancel",font=("Bold",15),bd=0,bg=bg_color,fg="white",command=lambda: action(False))
    cancel_btn.place(x=50,y=160)
    
    yes_btn=tk.Button(confirmation_box_fm,text="Yes",font=("Bold",15),bd=0,bg=bg_color,fg="white",command=lambda: action(True))
    yes_btn.place(x=190,y=160,width=80)
    
    confirmation_box_fm.place(x=200,y=200,width=320,height=220)
    root.wait_window(confirmation_box_fm)
    return answer.get()
def message_box(message):
    message_box_fm=tk.Frame(root,highlightbackground=bg_color,highlightthickness=3)
    
    close_btn=tk.Button(message_box_fm,text="X",bd=0,font=("Bold",13),fg=bg_color,command=lambda: message_box_fm.destroy())
    close_btn.place(x=5,y=5)
    
    message_lb=tk.Label(message_box_fm,text=message,font=("Bold",15))
    message_lb.pack(pady=50)
    
    message_box_fm.place(x=200,y=150,height=300,width=300)
def welcome_page():
    def forward_to_add_account_page():
        welcome_page_fm.destroy()
        root.update()
        create_account()
    def forward_to_student_page():
        welcome_page_fm.destroy()
        root.update()
        student_login()
    def forward_to_admin_page():
        welcome_page_fm.destroy()
        root.update()
        admin_login()
    
    welcome_page_fm=tk.Frame(root, 
                             highlightbackground=bg_color,
                             highlightthickness=3)
    heading_lb=tk.Label(welcome_page_fm, text="Welcome to 188no schools \n management system",
                        bg=bg_color, fg="white", font=("Bold", 18))
    heading_lb.place(x=0, y=0, width=400)
    
    student_login_btn=tk.Button(welcome_page_fm, text="Student Login",bg=bg_color,fg="white", font=("Bold", 15), bd=0,command=forward_to_student_page)
    student_login_btn.place(x=120, y=125, width=200)
    student_login_img=tk.Button(welcome_page_fm,image=login_student_icon, bd=0)
    student_login_img.place(x=60, y=100)
    
    
    admin_login_btn=tk.Button(welcome_page_fm, text="Admin Login",bg=bg_color,fg="white", font=("Bold", 15), bd=0,command=forward_to_admin_page)
    admin_login_btn.place(x=120, y=225, width=200)
    admin_login_img=tk.Button(welcome_page_fm,image=login_admin_icon, bd=0)
    admin_login_img.place(x=60, y=200)
    
    
    add_student_btn=tk.Button(welcome_page_fm, text="Create Account",bg=bg_color,fg="white", font=("Bold", 15), bd=0,command=forward_to_add_account_page)
    add_student_btn.place(x=120, y=325, width=200)
    add_student_img=tk.Button(welcome_page_fm,image=add_student_icon, bd=0)
    add_student_img.place(x=60, y=300)
    
    welcome_page_fm.pack(padx=30, pady=30)
    welcome_page_fm.configure(width=400, height=420)
def student_login():
    def hide_password():    
        if password_entry["show"]=="*":
            password_entry.config(show="")
            show_hide_btn.config(image=unlocked)
        else:
            password_entry.config(show="*")
            show_hide_btn.config(image=locked)
    def forward_to_welcome_page():
        student_login_page_fm.destroy()
        root.update()
        welcome_page()
    student_login_page_fm=tk.Frame(root, 
                             highlightbackground=bg_color,
                             highlightthickness=3)
    heading_lb=tk.Label(student_login_page_fm, text="Student Login Page",
                        bg=bg_color, fg="white", font=("Bold", 18))
    heading_lb.place(x=0, y=0, width=400)
        
    back_btn=tk.Button(student_login_page_fm,text="←",font=("Bold",15),fg=bg_color,bd=0,command=forward_to_welcome_page)
    back_btn.place(x=5,y=40)
        
    stud_icon_lb=tk.Label(student_login_page_fm,image=login_student_icon)
    stud_icon_lb.place(x=150,y=40)
    
    id_number_lb=tk.Label(student_login_page_fm,text="Enter Student ID Number.",
                          font=("Bold",15),fg=bg_color)
    id_number_lb.place(x=80,y=140)
    
    id_number_entry=tk.Entry(student_login_page_fm, font=("Bold",15),justify=tk.CENTER,highlightcolor=bg_color,highlightbackground="gray",highlightthickness=2)
    id_number_entry.place(x=80,y=190)
    
    pass_lb=tk.Label(student_login_page_fm,text="Enter Student Password.",
                          font=("Bold",15),fg=bg_color)
    pass_lb.place(x=80,y=240)
    password_entry=tk.Entry(student_login_page_fm, font=("Bold",15),justify=tk.CENTER,highlightcolor=bg_color,highlightbackground="gray",highlightthickness=2,show="*")
    password_entry.place(x=80,y=290)
    
    show_hide_btn=tk.Button(student_login_page_fm,image=locked,bd=0, command=hide_password)
    show_hide_btn.place(x=310,y=280)
    
    login_btn=tk.Button(student_login_page_fm, text="Login",bg=bg_color,fg="white", font=("Bold", 15), bd=0)
    login_btn.place(x=95, y=340, width=200,height=40)
    
    forget_pass_btn=tk.Button(student_login_page_fm,text="Forget Password",fg=bg_color,bd=0)
    forget_pass_btn.place(x=150,y=390)
    
    
     
    student_login_page_fm.pack(padx=30, pady=30)
    student_login_page_fm.configure(width=400, height=420)
def admin_login():
    def hide_password():    
        if password_entry["show"]=="*":
            password_entry.config(show="")
            show_hide_btn.config(image=unlocked)
        else:
            password_entry.config(show="*")
            show_hide_btn.config(image=locked)
    def forward_to_welcome_page():
        admin_login_fm.destroy()
        root.update()
        welcome_page()
    admin_login_fm=tk.Frame(root, 
                             highlightbackground=bg_color,
                             highlightthickness=3)
    
    
    heading_lb=tk.Label(admin_login_fm, text="Admin Login Page",
                         bg=bg_color, fg="white", font=("Bold", 18))
    heading_lb.place(x=0, y=0, width=400)
    
    back_btn=tk.Button(admin_login_fm,text="←",font=("Bold",15),fg=bg_color,bd=0,command=forward_to_welcome_page)
    back_btn.place(x=5,y=40)
    
    admin_icon_lb=tk.Label(admin_login_fm,image=login_admin_icon)
    admin_icon_lb.place(x=250,y=40)
    
    id_number_lb=tk.Label(admin_login_fm,text="Enter Admin User Name.",
                          font=("Bold",15),fg=bg_color)
    id_number_lb.place(x=80,y=140)
    
    id_number_entry=tk.Entry(admin_login_fm, font=("Bold",15),justify=tk.CENTER,highlightcolor=bg_color,highlightbackground="gray",highlightthickness=2)
    id_number_entry.place(x=80,y=190)
    
    pass_lb=tk.Label(admin_login_fm,text="Enter Admin Password.",
                          font=("Bold",15),fg=bg_color)
    pass_lb.place(x=80,y=240)
    password_entry=tk.Entry(admin_login_fm, font=("Bold",15),justify=tk.CENTER,highlightcolor=bg_color,highlightbackground="gray",highlightthickness=2,show="*")
    password_entry.place(x=80,y=290)
    
    show_hide_btn=tk.Button(admin_login_fm,image=locked,bd=0, command=hide_password)
    show_hide_btn.place(x=310,y=280)
    
    login_btn=tk.Button(admin_login_fm, text="Login",bg=bg_color,fg="white", font=("Bold", 15), bd=0)
    login_btn.place(x=95, y=340, width=200,height=40)
    
    forget_pass_btn=tk.Button(admin_login_fm,text="Forget Password",fg=bg_color,bd=0)
    forget_pass_btn.place(x=150,y=390)
    
    admin_login_fm.pack(pady=30)
    admin_login_fm.configure(width=400,height=430)
student_gender=tk.StringVar()

def create_account():
    pic_path=tk.StringVar()
    pic_path.set("")
    def open_pic():
        path=tk.filedialog.askopenfilename()
        if path:
            img=ImageTk.PhotoImage(Image.open(path))
            pic_path.set(path)
            
            add_pic_btn.config(image=img)
            add_pic_btn.image=img
    def forward_to_welcome_page():
        ans=confirmation_box('Do you want to leave\nRegisterition Foam? ')
        if ans:
            add_account_fm.destroy()
            root.update()
            welcome_page()
    def remove_highlight_warning(entry):
        if entry["highlightbackground"]!="gray":
            if entry.get()!="":
                entry.config(highlightbackground="gray",
                             highlightcolor=bg_color)
    def check_invalid_email(email):
 
        pattern = "^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$"
 
        match = re.match(pattern=pattern, string=email)
 
        return match
    def generate_id_num():
        generated_num=""
        for r in range(6):
            generated_num+=str(random.randint(0, 9))
        
        student_id.config(state=tk.NORMAL)
        student_id.delete(0, tk.END)
        student_id.insert(tk.END,generated_num)
        student_id.config(state="readonly")
    def check_input_validation():
        if student_name_ent.get()=="":
            student_name_ent.focus()
            student_name_ent.config(highlightbackground="red",highlightcolor="red")
            message_box("Student Full Name Required")
        elif student_age_ent.get()=="":
            student_age_ent.focus()
            student_age_ent.config(highlightbackground="red",highlightcolor="red")
            message_box("Student Age Required")
        elif student_contact_ent.get()=="":
            student_contact_ent.focus()
            student_contact_ent.config(highlightbackground="red",highlightcolor="red")
            message_box("Student Contact Num Required")
        elif student_class_btn.get()=="":
            student_class_btn.focus()
            message_box("Student Class Required")
        elif email_ent.get()=="":
            email_ent.focus()
            email_ent.config(highlightbackground="red",highlightcolor="red")
            message_box("Student Email Required")
        elif not check_invalid_email(email_ent.get().lower()):
            email_ent.focus()
            email_ent.config(highlightbackground="red",highlightcolor="red")
            message_box("Please Enter A Valid \n Email Address")
        elif student_password.get()=="":
            student_password.focus()
            student_password.config(highlightbackground="red",highlightcolor="red")
            message_box("Student Password Required")
        else:
            pic_data=b""
            if pic_path.get()!="":
                    resize_pic=Image.open(pic_path.get())
                    resize_pic.save("temp_pic.png")
                    
                    read_data=open("temp_pic.png","rb")
                    pic_data=read_data.read()
                    read_data.close()
            else:
                read_data=open("add_image.png","rb")
                pic_data=read_data.read()
                read_data.close()
            add_data(student_id.get(), student_password.get(), student_name_ent.get(), student_age_ent.get(),student_gender.get(), student_contact_ent.get(), student_class_btn.get(), email_ent.get(), pic_data)
            message_box("Account Created Succesfully")
    class_list=["5th","6th","7th","8th","9th","10th","11th"]
    add_account_fm=tk.Frame(root, 
                             highlightbackground=bg_color,
                             highlightthickness=3)
    add_pic_section_fm=tk.Frame(add_account_fm,highlightbackground=bg_color,highlightthickness=2)
    
    add_pic_btn=tk.Button(add_pic_section_fm, image=add_student_pic, command=open_pic)
    
    add_pic_btn.pack()
    
    add_pic_section_fm.place(x=5,y=30)
    
    student_name_lb=tk.Label(add_account_fm,text="Enter Student Full Name",font=("Bold",12))
    student_name_lb.place(x=100,y=35)
    
    student_name_ent=tk.Entry(add_account_fm,font=("Bold",15),highlightcolor=bg_color,highlightbackground="gray",highlightthickness=2)
    student_name_ent.place(x=100,y=60,width=180)
    student_name_ent.bind("<KeyRelease>",lambda e:remove_highlight_warning(student_name_ent))
    
    
    student_gender_lb=tk.Label(add_account_fm,text="Select Student's Gender.",font=("Bold",15))
    student_gender_lb.place(x=100,y=100)
    
    male_btn=tk.Radiobutton(add_account_fm,text="Male",font=("Bold",12),variable=student_gender,value="male")
    male_btn.place(x=100,y=130)
    
    female_btn=tk.Radiobutton(add_account_fm,text="Female",font=("Bold",12),variable=student_gender,value="female")
    female_btn.place(x=165,y=130)
    
    student_gender.set("male")
    
    
    student_age_lb=tk.Label(add_account_fm,text="Enter Student Age",font=("Bold",12))
    student_age_lb.place(x=100,y=170)
    
    student_age_ent=tk.Entry(add_account_fm,font=("Bold",15),highlightcolor=bg_color,highlightbackground="gray",highlightthickness=2)
    student_age_ent.place(x=100,y=190,width=180)
    student_age_ent.bind("<KeyRelease>",lambda e:remove_highlight_warning(student_age_ent))
    
    student_contact_lb=tk.Label(add_account_fm,text="Enter Student Contact.",font=("Bold",12))
    student_contact_lb.place(x=100,y=360)
    
    student_contact_ent=tk.Entry(add_account_fm,font=("Bold",15),highlightcolor=bg_color,highlightbackground="gray",highlightthickness=2)
    student_contact_ent.place(x=100,y=390,width=180)
    student_contact_ent.bind("<KeyRelease>",lambda e:remove_highlight_warning(student_contact_ent))

    student_class_lb=tk.Label(add_account_fm,text="Enter Student Class.",font=("Bold",12))
    student_class_lb.place(x=100,y=275)
    
    student_class_btn=Combobox(add_account_fm,font=("Bold",15),state="readonly",values=class_list)
    student_class_btn.place(x=100,y=300,width=180,height=30)
    student_class_btn.bind("<KeyRelease>",lambda e:remove_highlight_warning(student_class_btn))

    student_id_lb=tk.Label(add_account_fm,text="Student ID Number",font=("Bond",12))
    student_id_lb.place(x=350,y=35)
    
    student_id=tk.Entry(add_account_fm,font=("Bold",15),bd=0)
    student_id.place(x=500,y=35,width=80)
    
    student_id.insert(tk.END, "123456")
    student_id.config(state="readonly")
    
    generate_id_num()
    
    id_info=tk.Label(add_account_fm,text="""Automatic Generated ID Number
    ! Remember Using This ID Number
    Student will Login Account""",justify=tk.LEFT)
    id_info.place(x=350,y=65)
    
    student_email_lb=tk.Label(add_account_fm,text="Student Email",font=("Bond",12),highlightcolor=bg_color,highlightbackground="gray",highlightthickness=2)
    student_email_lb.place(x=350,y=160,width=180)
    
    email_ent=tk.Entry(add_account_fm,font=("Bold",15),highlightcolor=bg_color,highlightbackground="gray",highlightthickness=2)
    email_ent.place(x=350,y=280)
    email_ent.bind("<KeyRelease>",lambda e:remove_highlight_warning(email_ent))

    email_info=tk.Label(add_account_fm,text="""Via Email Address Student
    Can Recover Account 
    ! In Case Forgetting Password And Also 
    Student will get Future Notifications""",justify=tk.LEFT)
    email_info.place(x=350,y=200)
    
    student_password_lb = tk.Label(add_account_fm, text='Student Password', font=('Bond', 12))
    student_password_lb.place(x=350,y=330)
    
    student_password=tk.Entry(add_account_fm,font=("Bold",15),highlightcolor=bg_color,highlightbackground="gray",highlightthickness=2)
    student_password.place(x=350,y=380)
    student_password.bind("<KeyRelease>",lambda e:remove_highlight_warning(student_password))

    
    home_btn=tk.Button(add_account_fm,text="Home",font=("Bold",15),bg="red",fg="white",bd=0,command=forward_to_welcome_page)
    home_btn.place(x=240,y=450)
    
    submit_btn=tk.Button(add_account_fm,text="Submit",font=("Bold",15),bg="blue",fg="white",bd=0,command=check_input_validation)
    submit_btn.place(x=340,y=450)


    
    add_account_fm.pack(pady=5)
    add_account_fm.configure(width=600,height=580)

init_database()
create_account()
root.mainloop()
